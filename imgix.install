<?php

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\image\Entity\ImageStyle;
use Drupal\imgix\ImgixImageStyleFactoryInterface;
use Drupal\user\Entity\Role;

/**
 * Implements @see hook_update_last_removed().
 */
function imgix_update_last_removed(): int
{
    return 8001;
}

/**
 * Replace 'administer imgix' permission with 'administer image styles'
 */
function imgix_update_8002(): void
{
    foreach (Role::loadMultiple() as $role) {
        if (!$role->hasPermission('administer imgix')) {
            continue;
        }

        $role->revokePermission('administer imgix');
        $role->grantPermission('administer image styles');
        $role->save();
    }
}

/**
 * Remove the 'mapping_url' option
 */
function imgix_update_8003(): void
{
    \Drupal::configFactory()
        ->getEditable('imgix.settings')
        ->clear('mapping_url')
        ->save();
}

/**
 * Convert Imgix presets to image styles
 */
function imgix_update_8004(): string
{
    /** @var ImgixImageStyleFactoryInterface $factory */
    $factory = \Drupal::service('imgix.image_style_factory');
    $config = \Drupal::configFactory()->getEditable('imgix.presets');
    $count = 0;

    // Install the new image module dependency if not yet installed
    \Drupal::getContainer()
        ->get('module_installer')
        ->install(['image']);

    foreach ($config->get('presets') ?? [] as $preset) {
        if (ImageStyle::load($preset['key'])) {
            continue;
        }

        parse_str($preset['query'], $parameters);
        $imageStyle = $factory->getImageStyleByParameters($parameters);
        $imageStyle->set('id', $preset['key']);
        $imageStyle->set('name', $preset['key']);
        $imageStyle->save();
        $count++;
    }

    $config->delete();

    return sprintf('Created %d image styles from Imgix presets.', $count);
}

/**
 * Migrate fields from imgix to image field types
 */
function imgix_update_8005(): void
{
    $database = \Drupal::database();
    $fieldStorageStorage = \Drupal::entityTypeManager()
        ->getStorage('field_storage_config');

    $fieldStorageConfigNames = $fieldStorageStorage->getQuery()
        ->condition('type', 'imgix')
        ->execute();

    /** @var FieldStorageConfig $fieldStorage */
    foreach ($fieldStorageStorage->loadMultiple($fieldStorageConfigNames) as $fieldStorage) {
        $entityTypeId = $fieldStorage->getTargetEntityTypeId();
        $fieldName = $fieldStorage->getName();
        $newFieldType = 'image';

        $table = $entityTypeId . '__' . $fieldName;
        $currentRows = null;
        $newFieldsList = [];
        $fieldStorage = FieldStorageConfig::loadByName($entityTypeId, $fieldName);

        if (is_null($fieldStorage)) {
            return;
        }

        // Get all current data from DB.
        if ($database->schema()->tableExists($table)) {
            // The table data to restore after the update is completed.
            $currentRows = $database->select($table, 'n')
                ->fields('n')
                ->execute()
                ->fetchAll(\PDO::FETCH_ASSOC);
        }

        // Map description to alt field
        foreach ($currentRows as &$row) {
            $row[$fieldName . '_alt'] = $row[$fieldName . '_description'];
            unset($row[$fieldName . '_description']);
        }

        // Use existing field config for new field.
        foreach ($fieldStorage->getBundles() as $bundle => $label) {
            $field = FieldConfig::loadByName($entityTypeId, $bundle, $fieldName);
            $newField = $field->toArray();
            $newField['field_type'] = $newFieldType;
            $newFieldsList[] = $newField;
        }

        // Deleting field storage which will also delete bundles(fields).
        $newFieldStorage = $fieldStorage->toArray();
        $newFieldStorage['type'] = $newFieldType;

        $fieldStorage->delete();

        // Purge field data now to allow new field and field_storage with same name
        // to be created.
        field_purge_batch(40);

        // Create new field storage.
        $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
        $newFieldStorage->save();

        // Create new fields.
        foreach ($newFieldsList as $nfield) {
            $nfieldConfig = FieldConfig::create($nfield);
            $nfieldConfig->save();
        }

        // Restore existing data in new table.
        if (!is_null($currentRows)) {
            foreach ($currentRows as $row) {
                $query = sprintf(
                    'INSERT IGNORE INTO {%s} (%s) VALUES (:values[])',
                    $table,
                    implode(', ', array_keys($row))
                );
                $database->query($query, [':values[]' => array_values($row)]);
            }
        }
    }
}

/**
 * Migrate field widgets from imgix to image
 */
function imgix_update_8006(): void
{
    foreach (EntityFormDisplay::loadMultiple() as $formDisplay) {
        $changed = false;

        foreach ($formDisplay->getComponents() as $fieldName => $component) {
            if ($component['type'] !== 'imgix') {
                continue;
            }

            $component['type'] = 'image_image';

            if (isset($component['preview_preset'])) {
                $component['preview_image_style'] = $component['preview_preset'];
                unset($component['preview_preset']);
            }

            $formDisplay->setComponent($fieldName, $component);
            $changed = true;
        }

        if ($changed) {
            $formDisplay->save();
        }
    }
}

/**
 * Migrate field formatters from imgix to image
 */
function imgix_update_8007(): void
{
    foreach (EntityViewDisplay::loadMultiple() as $viewDisplay) {
        $changed = false;

        foreach ($viewDisplay->getComponents() as $fieldName => $component) {
            if ($component['type'] !== 'imgix_formatter') {
                continue;
            }

            $component['type'] = 'image';

            if (isset($component['image_preset'])) {
                $component['image_style'] = $component['image_preset'];
                unset($component['image_preset']);
            }

            $viewDisplay->setComponent($fieldName, $component);
            $changed = true;
        }

        if ($changed) {
            $viewDisplay->save();
        }
    }
}

/**
 * Activate the imgix image toolkit
 */
function imgix_update_8008(): void
{
    \Drupal::configFactory()
        ->getEditable('system.image')
        ->set('toolkit', 'imgix')
        ->save();
}

/**
 * Remove the 's3_has_prefix' option
 */
function imgix_update_8009(): void
{
    \Drupal::configFactory()
        ->getEditable('imgix.settings')
        ->clear('s3_has_prefix')
        ->save();
}
